---
layout:     post
title:      동적계획법 이란?
author:     쭌프로
tags: 		  알고리즘
subtitle:   동적계획법 간단 요약
category:   알고리즘
---
<!-- Start Writing Below in Markdown -->


![Description](https://alalstjr.github.io/promote.github.io/img/ag-bg.png)

#동적 계획법(Dynamic Programming)

<a href="https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%EA%B3%84%ED%9A%8D%EB%B2%95">위키백과 - 동적 계획법</a>

<p>
  수학자인 <b>리처드 벨만</b>이 1940년대에 사용하던 용어이며 <br/>
  복잡한 문제를 간단한 여러 개의 문제로 나누어 푸는 방법입니다.
</p>

<p>
  동적 계획법의 원리는 주어진 문제를 풀기 위해서, <br/>
  문제를 여러 개의 하위 문제(subproblem)로 나누어 푼 다음, <br/>
  그것을 결합하여 최종적인 목적에 도달하는 것이다. 
</p>

<p>
  이러한 동적 계획법의 장점으로는 <br/>
  하위 문제의 해결을 계산한 뒤, <br/>
  그 해결책을 저장하여 후에 같은 하위 문제가 나왔을 경우 <br/>
  그것을 간단하게 해결하며 내려가므로 <br/>
  계산 횟수를 줄일 수 있다.
</p>

<p>
  동적 계획법은 문제를 해결하기 위한 <b>모든 방법을 검토</b>하고, 그 중에 <b>최적의 풀이법</b>을 찾아내기 때문에 <br/>
  <b>최단 경로 문제</b>, 행렬의 제곱 문제 등의 최적화에 사용됩니다.
</p>

# 그리디 알고리즘과의 비교

<p>
  그리디 알고리즘과 동적 계획법을 비교하며 둘의 특성을 알아보도록 하겠습니다.
</p>

## 동적 계획법

![Description](https://alalstjr.github.io/promote.github.io/img/2019-04-11-1.png)

<p>
  위 그림을 예제로 <br/>
  1번 루트 실행 후 값을 저장 <br/>
  2번 루트 실행 후 값을 저장 <br/>
  3번 루트 실행 후 값을 저장 <br/>
  (만약에 중복되는 루트가 있으면 실행하지 않습니다.) <br/>
  모든 루트를 비교하여 최단의 루트를 찹아냅니다. <br/>
  모든 방법을 검토하여 그중에서 최적의 풀이법을 찾아내는 알고리즘 동적 계획법
</p>

## 그리디 알고리즘

![Description](https://alalstjr.github.io/promote.github.io/img/2019-04-11-2.png)

<p>
  동적 계획법의 단점으로 최적의 루트를 찾기위해서 모든 루트를 검토해야하는 단점이있지만 <br/>
  그리디 알고리즘은 그 순간의 경로를 비교하여 최적의 경로로 최적의 루트를 찾아가는 특징이 있습니다. <br/>
</p>

<p>
  동적 계획법은 약간의 시간이 걸린다는 단점이 있지만 확실하게 가장 빠른 결로를 안내 해주는 장점이 있습니다. <br/>
  그리디 알고리즘은 즉효성이 있는 대신, 항상 최적의 루트를 구해주지는 않는다.
</p>
